// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}






model User {
  userId String  @id @unique
  email  String  @unique
  name   String
  music  Music[]
  LastHistory lasthistory[]
  searchhistory SearchHistory[]
}

model Music {
  id           Int           @id @default(autoincrement())
  userId       String
  musicUrl     String
  thumbnailUrl String
  isfavourite  IsFavourite[]
  musicTitle   String
  musicArtist  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  playlist     Playlist[]    

  user         User          @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, musicUrl])
}

model IsFavourite {
  userId      String
  id          Int
  isFavourite Boolean

  music Music @relation(fields: [id], references: [id], onDelete: Cascade)

  @@id([userId, id])
}

model Playlist {
  userId         String
  musicId        Int
  playlistName   String

  createdAt      DateTime @default(now())
  Music          Music?   @relation(fields: [musicId], references: [id], onDelete: Cascade)
  
  @@id([userId, musicId, playlistName])
}

model lasthistory {
  userId String @id
  musicId Int
  musicUrl String
  thumbnailUrl String
  musicTitle String
  musicArtist String
  lastPlayedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)


  @@unique([userId])
}

model SearchHistory {
  userId String
  searchQuery String
  searchHistoryAt DateTime @default(now())

  user User @relation(fields: [userId], references: [userId])

  @@id([userId, searchQuery])
}
